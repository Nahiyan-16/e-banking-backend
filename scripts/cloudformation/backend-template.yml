AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation template to set up backend resources for e-bank application.
  This includes S3 bucket for user data, Cognito User Pool for authentication,
  Lambda function for processing, and API Gateway for exposing endpoints.

Parameters:
  StackName:
    Type: String
    Description: Stack name for unique resource naming
    Default: eBankStack
  StageName:
    Type: String
    Default: prod
    Description: Deployment stage name

Resources:
  UserDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "e-bank-user-data-${AWS::AccountId}"

  EBankLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "EBankLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3AccessForCode
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::e-bank-lambda-function-${AWS::AccountId}/index.zip"
        - PolicyName: S3AccessForRuntime
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::e-bank-user-data-${AWS::AccountId}/*"
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  EBankLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "E-Bank-Backend"
      Handler: index.handler
      Runtime: nodejs20.x
      Role: !GetAtt EBankLambdaRole.Arn
      Code:
        S3Bucket: !Sub "e-bank-lambda-function-${AWS::AccountId}"
        S3Key: "index.zip"
      Timeout: 10

  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: "*"

  CognitoUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: CognitoUnauthPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: "*"

  CognitoSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "eBankCognitoSNSRole-${StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CognitoSNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "e-bank-user-pool-${StackName}"
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: family_name
          Required: true
          Mutable: true
        - Name: phone_number
          Required: false
          Mutable: true
        - Name: address
          Required: false
          Mutable: true
        - Name: birthdate
          Required: false
          Mutable: true
      VerificationMessageTemplate:
        EmailMessage: "Your verification code is {####}"
        EmailSubject: "Your verification code"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: true
          RequireSymbols: false
      SmsConfiguration:
        SnsCallerArn: !GetAtt CognitoSNSRole.Arn
        SnsRegion: !Ref AWS::Region

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "e-bank-client-${StackName}"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "e-bank-identity-pool-${StackName}"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthRole.Arn
        unauthenticated: !GetAtt CognitoUnauthRole.Arn

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${StackName}-Api"
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResourceUsers:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: users

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub "${StackName}-CognitoAuthorizer"
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ApiGatewayRestApi
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn

  ApiGatewayMethodUsersGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceUsers
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt EBankLambdaFunction.Arn

  ApiGatewayMethodUsersPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceUsers
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt EBankLambdaFunction.Arn

  ApiGatewayMethodUsersOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceUsers
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodUsersGet
      - ApiGatewayMethodUsersPost
      - ApiGatewayMethodUsersOptions
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref StageName

  ApiGatewayApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      Name: !Sub "${StackName}-ApiKey"
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGatewayRestApi
          StageName: !Ref StageName

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      UsagePlanName: !Sub "${StackName}-UsagePlan"
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: !Ref StageName
      Throttle:
        BurstLimit: 10
        RateLimit: 100

  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - ApiGatewayApiKey
      - ApiGatewayUsagePlan
    Properties:
      KeyId: !Ref ApiGatewayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      FunctionName: !GetAtt EBankLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiId}/*/*/users
        - RestApiId: !Ref ApiGatewayRestApi

Outputs:
  UserDataBucketName:
    Description: S3 bucket name for user JSON objects
    Value: !Ref UserDataBucket
    Export:
      Name: !Sub "${StackName}-UserDataBucket"
  UserDataBucketArn:
    Description: S3 bucket ARN for user JSON objects
    Value: !GetAtt UserDataBucket.Arn
    Export:
      Name: !Sub "${StackName}-UserDataBucketArn"
  LambdaFunctionArn:
    Description: ARN of the created Lambda function.
    Value: !GetAtt EBankLambdaFunction.Arn
    Export:
      Name: !Sub "${StackName}-LambdaFunctionArn"
  LambdaFunctionName:
    Description: Name of the created Lambda function.
    Value: !Ref EBankLambdaFunction
    Export:
      Name: !Sub "${StackName}-LambdaFunctionName"
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub "${StackName}-UserPoolId"
  UserPoolArn:
    Description: Cognito User Pool ARN
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub "${StackName}-UserPoolArn"
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${StackName}-UserPoolClientId"
  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "${StackName}-IdentityPoolId"
  ApiId:
    Description: "API Gateway Rest API ID"
    Value: !Ref ApiGatewayRestApi
    Export:
      Name: !Sub "${StackName}-ApiId"
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
    Export:
      Name: !Sub "${StackName}-ApiEndpoint"
  ApiInvokeUrl:
    Description: "Invoke URL for API Gateway"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
    Export:
      Name: !Sub "${StackName}-ApiInvokeUrl"
  ApiKeyId:
    Description: "API Gateway API Key ID"
    Value: !Ref ApiGatewayApiKey
    Export:
      Name: !Sub "${StackName}-ApiKeyId"
